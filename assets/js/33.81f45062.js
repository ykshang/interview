(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{485:function(t,r,_){"use strict";_.r(r);var v=_(3),o=Object(v.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),r("p",[t._v("原型链（prototype chain）是 JavaScript 中实现对象属性继承的一种机制。")]),t._v(" "),r("p",[t._v("每个对象都有一个内部属性 "),r("strong",[t._v("[[Prototype]]")]),t._v("，用于指向它的原型对象。")]),t._v(" "),r("p",[t._v("当我们访问一个对象的属性时，如果该对象本身没有这个属性，JavaScript 引擎会沿着原型链向上查找，直到找到属性或者到达原型链的顶端。这样就实现了属性的继承。")]),t._v(" "),r("p",[t._v("具体来说，当我们创建一个对象时，它会从其构造函数的原型对象中继承属性和方法。这个构造函数的原型对象同时也有它自己的原型对象，以此类推，就形成了一个原型链。原型链的顶端是 "),r("strong",[t._v("Object.prototype")]),t._v("，它包含了 JavaScript 中默认的方法和属性，如 "),r("strong",[t._v("toString()")]),t._v("。")]),t._v(" "),r("p",[t._v("通过原型链，我们可以重复使用已有的对象的属性和方法，而不需要每个对象都复制一份。这样可以节省内存，也方便了对象的属性和方法的更新和维护。")]),t._v(" "),r("p",[t._v("可以使用 "),r("strong",[t._v("Object.create()")]),t._v(" 方法来显式地指定一个对象的原型，或者使用 "),r("strong",[t._v("__proto__")]),t._v(" 属性动态改变一个对象的原型链。")])])}),[],!1,null,null,null);r.default=o.exports}}]);