(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{499:function(a,t,s){"use strict";s.r(t);var n=s(3),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[a._v("#")]),a._v(" 内存泄漏")]),a._v(" "),t("p",[a._v("JavaScript内存泄漏指的是在执行一个长期运行的应用程序时，由于缺乏适当的垃圾回收机制，导致不再需要的内存无法被释放，从而累积占用过多内存，最终导致应用崩溃或性能下降的情况。")]),a._v(" "),t("h2",{attrs:{id:"常见的javascript内存泄漏包括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的javascript内存泄漏包括"}},[a._v("#")]),a._v(" 常见的JavaScript内存泄漏包括：")]),a._v(" "),t("h3",{attrs:{id:"_1-意外的全局变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-意外的全局变量"}},[a._v("#")]),a._v(" 1. 意外的全局变量")]),a._v(" "),t("p",[a._v("未声明的变量会被自动升级为全局对象，作用域为window或者整个窗口。\n如果不小心忘记了var, let或const，可能创建意外的全局变量。")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'global variable'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/// 作用域等同于 window.a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"_2-未解除的事件监听器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-未解除的事件监听器"}},[a._v("#")]),a._v(" 2. 未解除的事件监听器")]),a._v(" "),t("p",[a._v("如果一个DOM元素被移除，但相关的事件监听器仍然保持在内存中，就会发生内存泄漏。")]),a._v(" "),t("h3",{attrs:{id:"_3-闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-闭包"}},[a._v("#")]),a._v(" 3. 闭包")]),a._v(" "),t("p",[a._v("如果一个函数内部定义了另一个函数，并且这个内部函数引用了外部函数的变量，那么即使外部函数已经执行完毕，这些变量也不会被垃圾回收，因为内部函数依然可以访问它们。")]),a._v(" "),t("h3",{attrs:{id:"_4-未移除的定时器或回调函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-未移除的定时器或回调函数"}},[a._v("#")]),a._v(" 4. 未移除的定时器或回调函数")]),a._v(" "),t("p",[a._v("设置了定时器或者异步回调函数，但是没有在不需要时清除它们。")]),a._v(" "),t("h3",{attrs:{id:"_5-dom引用没有清理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-dom引用没有清理"}},[a._v("#")]),a._v(" 5. DOM引用没有清理")])])}),[],!1,null,null,null);t.default=r.exports}}]);